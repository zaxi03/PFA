version: '3.8'

services:
  # Init container to populate webapp_configs volume
  waf-config-init:
    build: ./waf
    container_name: waf-config-init
    volumes:
      - webapp_configs:/tmp/nginx-config
    command: [ "sh", "-c", "cp -r /etc/nginx/* /tmp/nginx-config/ && echo 'WAF config copied'" ]
    networks:
      - common-net

  flask:
    build: ./admin_interface
    container_name: flask
    ports:
      - "5000:5000"
    volumes:
      - ./admin_interface:/app
      - modsec-logs:/mnt/modsec-logs:ro
      - firewall-logs:/mnt/firewall-logs:ro
      - nginx-logs:/mnt/nginx-logs:ro
      - ./firewall/config/nftables.conf:/mnt/firewall-config/nftables.conf
      - ./waf/config/modsecurity.conf:/etc/nginx/modsec/modsecurity.conf:ro
      - ./waf/config/crs-setup.conf:/usr/local/modsecurity-crs/crs-setup.conf:ro
      - waf_rules:/usr/local/modsecurity-crs/rules
      - webapp_configs:/etc/nginx
      - app_info:/etc/waf
      - rule_check:/app/rules_check
    networks:
      - common-net
    depends_on:
      - db
      - waf-config-init
    environment:
      - FLASK_ENV=development
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=flask_db

  db:
    image: mysql:8.0
    container_name: mysql-flask
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: flask_db
    volumes:
      - db_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - common-net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    container_name: phpmyadmin
    restart: always
    ports:
      - "8081:80"
    networks:
      - common-net
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD: root

  waf:
    build: ./waf
    container_name: waf
    ports:
      - "8080:80"
    volumes:
      - ./waf/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./waf/config/modsecurity.conf:/etc/nginx/modsec/modsecurity.conf:ro
      - ./waf/config/crs-setup.conf:/usr/local/modsecurity-crs/crs-setup.conf:ro
      - ./waf/config/default.conf:/etc/nginx/conf.d/default.conf:ro
      - modsec-logs:/var/log
      - nginx-logs:/var/log/nginx
      - waf_rules:/usr/local/modsecurity-crs/rules
      - webapp_configs:/etc/nginx  # WAF will use the pre-populated volume
      - app_info:/etc/waf
      - rule_check:/usr/local/modsecurity-crs/util
    depends_on:
      - flask
    networks:
      common-net:
        ipv4_address: 172.28.0.10

  firewall:
    build: ./firewall
    container_name: firewall
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "9000:9000" # expos√© pour API REST Flask dans firewall
    volumes:
      - ./firewall/config/nftables.conf:/etc/nftables.conf
      - firewall-logs:/var/log
      - ./firewall/app/:/app
    networks:
      common-net:
        ipv4_address: 172.28.0.11

  dvwa:
    image: vulnerables/web-dvwa
    container_name: dvwa
    ports:
      - "8082:80"
    networks:
      - common-net

volumes:
  db_data:
  modsec-logs:
  firewall-logs:
  nginx-logs:
  waf_rules:
  webapp_configs:
  app_info:
  rule_check:

networks:
  common-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

